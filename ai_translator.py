#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–ò –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI API –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤
"""

import json
import time
import logging
from datetime import datetime
from typing import List, Dict, Optional
import openai
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ai_translator.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AITranslator:
    """–ò–ò –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    
    def __init__(self, api_key: str = None):
        self.api_key = api_key or os.getenv('OPENAI_API_KEY')
        if self.api_key:
            openai.api_key = self.api_key
            logger.info("OpenAI API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.warning("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
    
    def translate_with_ai(self, text: str, context: str = "") -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        if not self.api_key:
            logger.error("OpenAI API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return text
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
            prompt = f"""
–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. 
–¢–µ–∫—Å—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏ –∏ –∞—Ä–æ–º–∞—Ç–∞–º. 
–°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤.
–°–¥–µ–ª–∞–π –ø–µ—Ä–µ–≤–æ–¥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:
{text}

–ü–µ—Ä–µ–≤–æ–¥:
"""
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–∞—Ö –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏ –∏ –∞—Ä–æ–º–∞—Ç–∞—Ö."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=2000,
                temperature=0.3
            )
            
            translated_text = response.choices[0].message.content.strip()
            logger.info(f"–ò–ò –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–ª–∏–Ω–∞: {len(translated_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return translated_text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ò–ò –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
            return text
    
    def translate_news_with_ai(self, news_items: List[Dict]) -> List[Dict]:
        """–ü–µ—Ä–µ–≤–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        logger.info("–ù–∞—á–∏–Ω–∞—é –ò–ò –ø–µ—Ä–µ–≤–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        
        translated_news = []
        for i, news in enumerate(news_items, 1):
            logger.info(f"–ü–µ—Ä–µ–≤–æ–∂—É –Ω–æ–≤–æ—Å—Ç—å {i}/{len(news_items)}: {news.get('title', '')[:50]}...")
            
            translated_news_item = news.copy()
            
            # –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            if news.get('title'):
                translated_news_item['title_ru_ai'] = self.translate_with_ai(
                    news['title'], 
                    "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏"
                )
            
            # –ü–µ—Ä–µ–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            if news.get('content'):
                translated_news_item['content_ru_ai'] = self.translate_with_ai(
                    news['content'], 
                    "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏"
                )
            
            # –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            if news.get('full_content'):
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                full_content = news['full_content']
                if len(full_content) > 3000:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤
                    parts = [full_content[j:j+3000] for j in range(0, len(full_content), 3000)]
                    translated_parts = []
                    
                    for part_num, part in enumerate(parts, 1):
                        logger.info(f"–ü–µ—Ä–µ–≤–æ–∂—É —á–∞—Å—Ç—å {part_num}/{len(parts)} –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è...")
                        translated_part = self.translate_with_ai(
                            part, 
                            f"–ß–∞—Å—Ç—å {part_num} –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏"
                        )
                        translated_parts.append(translated_part)
                        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    
                    translated_news_item['full_content_ru_ai'] = ' '.join(translated_parts)
                else:
                    translated_news_item['full_content_ru_ai'] = self.translate_with_ai(
                        full_content, 
                        "–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏"
                    )
            
            translated_news.append(translated_news_item)
            time.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏
        
        return translated_news
    
    def save_to_json(self, news_items: List[Dict], filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ JSON —Ñ–∞–π–ª"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"fragrantica_ai_translated_news_{timestamp}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(news_items, f, ensure_ascii=False, indent=2)
            logger.info(f"–ù–æ–≤–æ—Å—Ç–∏ —Å –ò–ò –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    def print_comparison(self, news_items: List[Dict]):
        """–í—ã–≤–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        print(f"\n{'='*80}")
        print(f"–°–†–ê–í–ù–ï–ù–ò–ï –ü–ï–†–ï–í–û–î–û–í: {len(news_items)} –ù–û–í–û–°–¢–ï–ô")
        print(f"{'='*80}")
        
        for i, news in enumerate(news_items, 1):
            print(f"\n{i}. {news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
            
            if news.get('title_ru') and news.get('title_ru_ai'):
                print(f"   üá∑üá∫ –û–±—ã—á–Ω—ã–π: {news.get('title_ru')}")
                print(f"   ü§ñ –ò–ò: {news.get('title_ru_ai')}")
            
            if news.get('content_ru') and news.get('content_ru_ai'):
                print(f"   üìù –û–±—ã—á–Ω—ã–π: {news.get('content_ru')[:100]}...")
                print(f"   ü§ñ –ò–ò: {news.get('content_ru_ai')[:100]}...")
            
            if news.get('full_content_ru') and news.get('full_content_ru_ai'):
                print(f"   üìÑ –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–ò–ò): {news.get('full_content_ru_ai')[:200]}...")
            
            print("-" * 80)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "="*60)
    print("ü§ñ –ò–ò –ü–ï–†–ï–í–û–î–ß–ò–ö –î–õ–Ø FRAGRANTICA")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
        print("–ü—Ä–∏–º–µ—Ä: export OPENAI_API_KEY='your-api-key-here'")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
    input_file = "fragrantica_gologin_fixed_news_20250803_113644.json"
    
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            news_items = json.load(f)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ñ–∞–π–ª–∞ {input_file}")
        
        # –°–æ–∑–¥–∞–µ–º –ò–ò –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
        translator = AITranslator(api_key)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò
        ai_translated_news = translator.translate_news_with_ai(news_items)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        translator.save_to_json(ai_translated_news)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        translator.print_comparison(ai_translated_news)
        
        logger.info("–ò–ò –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 