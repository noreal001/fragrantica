let isProcessing = false;

async function startParser() {
    if (isProcessing) return;
    isProcessing = true;
    
    const startBtn = document.getElementById('startBtn');
    const stopBtn = document.getElementById('stopBtn');
    const loading = document.getElementById('loading');
    const progressContainer = document.getElementById('progressContainer');
    const status = document.getElementById('status');
    const newsCard = document.getElementById('newsCard');
    
    startBtn.disabled = true;
    stopBtn.disabled = false;
    loading.style.display = 'block';
    progressContainer.style.display = 'block';
    newsCard.classList.remove('show');
    status.textContent = '–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...';
    status.className = 'status running';
    
    try {
        const settings = {
            newsCount: document.getElementById('newsCount').value,
            targetLanguage: document.getElementById('targetLanguage').value
        };
        
        const response = await fetch('/api/start-parser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(settings)
        });
        
        console.log('Response status:', response.status);
        console.log('Response headers:', response.headers);
        
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞');
        }
        
        status.textContent = '–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω';
        
        // Monitor progress
        let progress = 0;
        const progressInterval = setInterval(async () => {
            try {
                const statusResponse = await fetch('/api/status');
                const statusData = await statusResponse.json();
                
                                if (statusData.running) {
                    progress = Math.min(progress + 5, 85);
                    document.getElementById('progressFill').style.width = progress + '%';
                    document.getElementById('progressText').textContent = statusData.message;
                } else if (statusData.result_file) {
                            clearInterval(progressInterval);
                            progress = 100;
                            document.getElementById('progressFill').style.width = '100%';
                            document.getElementById('progressText').textContent = '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!';
                            
                            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    // Start AI translator
                    status.textContent = '–ü–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é –ò–ò...';
                    const translatorResponse = await fetch('/api/start-ai-translator');
                    const translatorData = await translatorResponse.json();
                    if (!translatorResponse.ok) {
                        throw new Error(translatorData.error || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞');
                    }
                    
                    // Get result
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    const filesResponse = await fetch('/api/files');
                    const filesData = await filesResponse.json();
                    if (filesData.files && filesData.files.length > 0) {
                        const latestFile = filesData.files[0];
                        const downloadResponse = await fetch(`/api/download/${latestFile.name}`);
                        const newsData = await downloadResponse.json();
                        if (newsData.articles && newsData.articles.length > 0) {
                            const latestArticle = newsData.articles[0];
                            displayNews(latestArticle);
                            status.textContent = '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!';
                            status.className = 'status';
                        } else {
                            throw new Error('–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                        }
                    } else {
                        throw new Error('–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    }
                }
            } catch (error) {
                clearInterval(progressInterval);
                throw error;
            }
        }, 1000);
        
    } catch (error) {
        console.error('Error:', error);
        let errorMessage = error.message;
        
        // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if (errorMessage.includes('greenlet')) {
            errorMessage = '–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å greenlet –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–∞—Ä—Å–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.';
        } else if (errorMessage.includes('playwright')) {
            errorMessage = '–û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º Playwright.';
        } else if (errorMessage.includes('cloudflare')) {
            errorMessage = '–û—à–∏–±–∫–∞: –°–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (errorMessage.includes('timeout') || errorMessage.includes('–¢–∞–π–º–∞—É—Ç')) {
            errorMessage = '–û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–∏—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        } else if (errorMessage.includes('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')) {
            errorMessage = '–û—à–∏–±–∫–∞: –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        }
        
        status.textContent = errorMessage;
        status.className = 'status error';
    } finally {
        isProcessing = false;
        startBtn.disabled = false;
        stopBtn.disabled = true;
        loading.style.display = 'none';
        progressContainer.style.display = 'none';
    }
}

async function stopParser() {
    try {
        const response = await fetch('/api/stop-parser', {
            method: 'POST'
        });
        const data = await response.json();
        
        if (response.ok) {
            document.getElementById('status').textContent = '–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
            document.getElementById('status').className = 'status';
            document.getElementById('startBtn').disabled = false;
            document.getElementById('stopBtn').disabled = true;
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞');
        }
    } catch (error) {
        console.error('Error stopping parser:', error);
        document.getElementById('status').textContent = `–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${error.message}`;
        document.getElementById('status').className = 'status error';
    }
}

function displayNews(article) {
    const newsCard = document.getElementById('newsCard');
    const newsTitle = document.getElementById('newsTitle');
    const newsDate = document.getElementById('newsDate');
    const newsContent = document.getElementById('newsContent');
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–≤–æ–¥)
    let titleHtml = `<div class="news-title-original">${article.title || '–ù–æ–≤–æ—Å—Ç—å'}</div>`;
    if (article.title_ru) {
        titleHtml += `<div class="news-title-translated">üá∑üá∫ ${article.title_ru}</div>`;
    }
    newsTitle.innerHTML = titleHtml;
    
    // –î–∞—Ç–∞
    const date = new Date();
    newsDate.textContent = date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
    
    // –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–≤–æ–¥)
    let contentHtml = '';
    
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    if (article.content) {
        contentHtml += `<div class="news-content-section">
            <h4>üìù –û—Ä–∏–≥–∏–Ω–∞–ª:</h4>
            <div class="news-content-original">${article.content.replace(/\n/g, '<br><br>')}</div>
        </div>`;
    }
    
    // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    if (article.content_ru) {
        contentHtml += `<div class="news-content-section">
            <h4>üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥:</h4>
            <div class="news-content-translated">${article.content_ru.replace(/\n/g, '<br><br>')}</div>
        </div>`;
    }
    
    // –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (article.full_content) {
        contentHtml += `<div class="news-content-section">
            <h4>üìÑ –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</h4>
            <div class="news-content-full">${article.full_content.replace(/\n/g, '<br><br>')}</div>
        </div>`;
    }
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
    if (article.link) {
        contentHtml += `<div class="news-link-section">
            <a href="${article.link}" target="_blank" class="news-link">üîó –ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª</a>
        </div>`;
    }
    
    if (!contentHtml) {
        contentHtml = '<div class="news-content-empty">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</div>';
    }
    
    newsContent.innerHTML = contentHtml;
    newsCard.classList.add('show');
}

// Check status every 10 seconds
setInterval(async () => {
    if (!isProcessing) {
        try {
            const response = await fetch('/api/status');
            const data = await response.json();
            const status = document.getElementById('status');
            const startBtn = document.getElementById('startBtn');
            const stopBtn = document.getElementById('stopBtn');
            
            if (data.running) {
                status.textContent = data.message;
                status.className = 'status running';
                startBtn.disabled = true;
                stopBtn.disabled = false;
            } else {
                status.textContent = '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ';
                status.className = 'status';
                startBtn.disabled = false;
                stopBtn.disabled = true;
            }
        } catch (error) {
            console.error('Status update error:', error);
        }
    }
}, 10000);

async function resetStatus() {
    try {
        const response = await fetch('/api/reset-status', {
            method: 'POST'
        });
        const data = await response.json();
        
        if (response.ok) {
            document.getElementById('status').textContent = '–°—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω';
            document.getElementById('status').className = 'status';
            document.getElementById('startBtn').disabled = false;
            document.getElementById('stopBtn').disabled = true;
            console.log('–°—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω:', data.message);
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞');
        }
    } catch (error) {
        console.error('Error resetting status:', error);
        document.getElementById('status').textContent = `–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: ${error.message}`;
        document.getElementById('status').className = 'status error';
    }
}

async function testParser() {
    try {
        document.getElementById('status').textContent = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞...';
        document.getElementById('status').className = 'status running';
        
        const response = await fetch('/api/test-parser', {
            method: 'POST'
        });
        const data = await response.json();
        
        if (response.ok) {
            document.getElementById('status').textContent = '–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!';
            document.getElementById('status').className = 'status';
            console.log('–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞:', data.message);
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞');
        }
    } catch (error) {
        console.error('Error testing parser:', error);
        document.getElementById('status').textContent = `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error.message}`;
        document.getElementById('status').className = 'status error';
    }
}

async function clearFiles() {
    try {
        const response = await fetch('/api/clear-files', {
            method: 'POST'
        });
        const data = await response.json();
        
        if (response.ok) {
            document.getElementById('status').textContent = '–§–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã';
            document.getElementById('status').className = 'status';
            console.log('–§–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã:', data.message);
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤');
        }
    } catch (error) {
        console.error('Error clearing files:', error);
        document.getElementById('status').textContent = `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`;
        document.getElementById('status').className = 'status error';
    }
} 